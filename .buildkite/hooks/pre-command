#!/bin/sh

set -e

export DATABASE_URL=$DATABASE_URL.$BUILDKITE_BUILD_NUMBER
COG_DIR=cogctl_cog

cd ..

if [ ! -d $COG_DIR ]; then
  echo "Setting up cog..."

  git clone git@github.com:operable/cog.git $COG_DIR
  cd $COG_DIR
else
  echo "Making sure cog is up-to-date..."

  cd $COG_DIR
  git fetch origin

  # If this build is being triggered from a Cog build, then there
  # should be a $COG_BRANCH variable set. If not, see if Cog has a
  # branch named the same as what we're building. Othwerwise, just use
  # the master branch.
  if [ -z ${COG_BRANCH+notset} ]
  then
      if git ls-remote --exit-code --heads https://github.com/operable/cog refs/heads/${BUILDKITE_BRANCH} > /dev/null 2>&1
      then
          COG_BRANCH=${BUILDKITE_BRANCH}
      else
          COG_BRANCH='master'
      fi
  fi

  echo "Running cog from the ${COG_BRANCH} branch"
  git reset --hard origin/${COG_BRANCH}
fi

mix do deps.get, ecto.create, ecto.migrate

echo "Starting cog..."

elixir \
--detached \
-e "File.write!(\"pid.$BUILDKITE_BUILD_NUMBER\", System.get_pid)" \
-S mix phoenix.server

sleep 2 # Wait for the pidfile to be written

COG_PID=$(cat pid.$BUILDKITE_BUILD_NUMBER)

while true
do
    if ps -p $COG_PID
    then
        if nc -z localhost 4000
        then
            # all done; the service is up
            break
        else
            # Not up yet; try again later
            sleep 1
            continue
        fi
    else
        echo "The cog server process couldn't come up for some reason!"
        exit 1
    fi
done

cd ../cogctl
